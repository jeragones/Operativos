
// instrument by jscoverage, do not modifly this file
(function (file, lines, conds, source) {
  var BASE;
  if (typeof global === 'object') {
    BASE = global;
  } else if (typeof window === 'object') {
    BASE = window;
  } else {
    throw new Error('[jscoverage] unknow ENV!');
  }
  if (BASE._$jscoverage) {
    BASE._$jscmd(file, 'init', lines, conds, source);
    return;
  }
  var cov = {};
  /**
   * jsc(file, 'init', lines, condtions)
   * jsc(file, 'line', lineNum)
   * jsc(file, 'cond', lineNum, expr, start, offset)
   */
  function jscmd(file, type, line, express, start, offset) {
    var storage;
    switch (type) {
      case 'init':
        if(cov[file]){
          storage = cov[file];
        } else {
          storage = [];
          for (var i = 0; i < line.length; i ++) {
            storage[line[i]] = 0;
          }
          var condition = express;
          var source = start;
          storage.condition = condition;
          storage.source = source;
        }
        cov[file] = storage;
        break;
      case 'line':
        storage = cov[file];
        storage[line] ++;
        break;
      case 'cond':
        storage = cov[file];
        storage.condition[line] ++;
        return express;
    }
  }

  BASE._$jscoverage = cov;
  BASE._$jscmd = jscmd;
  jscmd(file, 'init', lines, conds, source);
})('lib/pool.js', [2,4,6,27,12,19,23,8,9,16,14,20], {"13_8_21":0}, ["// Generated by CoffeeScript 1.8.0","var Pool, Worker;","","Worker = require('./worker').Worker;","","Pool = (function() {","  function Pool(job) {","    this.job = job;","    this.instances = [];","  }","","  Pool.prototype.getWorker = function() {","    if (this.instances.length) {","      return this.instances.pop();","    }","    return new Worker(this.job);","  };","","  Pool.prototype.dispose = function(worker) {","    return this.instances.push(worker);","  };","","  return Pool;","","})();","","module.exports.Pool = Pool;",""]);
// Generated by CoffeeScript 1.8.0
_$jscmd("lib/pool.js", "line", 2);

var Pool, Worker;

_$jscmd("lib/pool.js", "line", 4);

Worker = require("./worker").Worker;

_$jscmd("lib/pool.js", "line", 6);

Pool = function() {
    function Pool(job) {
        _$jscmd("lib/pool.js", "line", 8);
        this.job = job;
        _$jscmd("lib/pool.js", "line", 9);
        this.instances = [];
    }
    _$jscmd("lib/pool.js", "line", 12);
    Pool.prototype.getWorker = function() {
        if (_$jscmd("lib/pool.js", "cond", "13_8_21", this.instances.length)) {
            _$jscmd("lib/pool.js", "line", 14);
            return this.instances.pop();
        }
        _$jscmd("lib/pool.js", "line", 16);
        return new Worker(this.job);
    };
    _$jscmd("lib/pool.js", "line", 19);
    Pool.prototype.dispose = function(worker) {
        _$jscmd("lib/pool.js", "line", 20);
        return this.instances.push(worker);
    };
    _$jscmd("lib/pool.js", "line", 23);
    return Pool;
}();

_$jscmd("lib/pool.js", "line", 27);

module.exports.Pool = Pool;