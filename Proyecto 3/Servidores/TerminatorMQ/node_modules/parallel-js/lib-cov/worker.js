
// instrument by jscoverage, do not modifly this file
(function (file, lines, conds, source) {
  var BASE;
  if (typeof global === 'object') {
    BASE = global;
  } else if (typeof window === 'object') {
    BASE = window;
  } else {
    throw new Error('[jscoverage] unknow ENV!');
  }
  if (BASE._$jscoverage) {
    BASE._$jscmd(file, 'init', lines, conds, source);
    return;
  }
  var cov = {};
  /**
   * jsc(file, 'init', lines, condtions)
   * jsc(file, 'line', lineNum)
   * jsc(file, 'cond', lineNum, expr, start, offset)
   */
  function jscmd(file, type, line, express, start, offset) {
    var storage;
    switch (type) {
      case 'init':
        if(cov[file]){
          storage = cov[file];
        } else {
          storage = [];
          for (var i = 0; i < line.length; i ++) {
            storage[line[i]] = 0;
          }
          var condition = express;
          var source = start;
          storage.condition = condition;
          storage.source = source;
        }
        cov[file] = storage;
        break;
      case 'line':
        storage = cov[file];
        storage[line] ++;
        break;
      case 'cond':
        storage = cov[file];
        storage.condition[line] ++;
        return express;
    }
  }

  BASE._$jscoverage = cov;
  BASE._$jscmd = jscmd;
  jscmd(file, 'init', lines, conds, source);
})('lib/worker.js', [2,4,21,10,17,6,7,11,12,13,14], {"7_43_10":0,"7_56_1":0}, ["// Generated by CoffeeScript 1.8.0","var Worker;","","Worker = (function() {","  function Worker(job, numRetries) {","    this.job = job;","    this.numRetries = numRetries != null ? numRetries : 0;","  }","","  Worker.prototype.run = function(callback, args) {","    var a;","    a = Array.prototype.slice.call(args, 0);","    a.unshift(callback);","    return this.job.apply(void 0, a);","  };","","  return Worker;","","})();","","module.exports.Worker = Worker;",""]);
// Generated by CoffeeScript 1.8.0
_$jscmd("lib/worker.js", "line", 2);

var Worker;

_$jscmd("lib/worker.js", "line", 4);

Worker = function() {
    function Worker(job, numRetries) {
        _$jscmd("lib/worker.js", "line", 6);
        this.job = job;
        _$jscmd("lib/worker.js", "line", 7);
        this.numRetries = numRetries != null ? _$jscmd("lib/worker.js", "cond", "7_43_10", numRetries) : _$jscmd("lib/worker.js", "cond", "7_56_1", 0);
    }
    _$jscmd("lib/worker.js", "line", 10);
    Worker.prototype.run = function(callback, args) {
        _$jscmd("lib/worker.js", "line", 11);
        var a;
        _$jscmd("lib/worker.js", "line", 12);
        a = Array.prototype.slice.call(args, 0);
        _$jscmd("lib/worker.js", "line", 13);
        a.unshift(callback);
        _$jscmd("lib/worker.js", "line", 14);
        return this.job.apply(void 0, a);
    };
    _$jscmd("lib/worker.js", "line", 17);
    return Worker;
}();

_$jscmd("lib/worker.js", "line", 21);

module.exports.Worker = Worker;