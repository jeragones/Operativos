
// instrument by jscoverage, do not modifly this file
(function (file, lines, conds, source) {
  var BASE;
  if (typeof global === 'object') {
    BASE = global;
  } else if (typeof window === 'object') {
    BASE = window;
  } else {
    throw new Error('[jscoverage] unknow ENV!');
  }
  if (BASE._$jscoverage) {
    BASE._$jscmd(file, 'init', lines, conds, source);
    return;
  }
  var cov = {};
  /**
   * jsc(file, 'init', lines, condtions)
   * jsc(file, 'line', lineNum)
   * jsc(file, 'cond', lineNum, expr, start, offset)
   */
  function jscmd(file, type, line, express, start, offset) {
    var storage;
    switch (type) {
      case 'init':
        if(cov[file]){
          storage = cov[file];
        } else {
          storage = [];
          for (var i = 0; i < line.length; i ++) {
            storage[line[i]] = 0;
          }
          var condition = express;
          var source = start;
          storage.condition = condition;
          storage.source = source;
        }
        cov[file] = storage;
        break;
      case 'line':
        storage = cov[file];
        storage[line] ++;
        break;
      case 'cond':
        storage = cov[file];
        storage.condition[line] ++;
        return express;
    }
  }

  BASE._$jscoverage = cov;
  BASE._$jscmd = jscmd;
  jscmd(file, 'init', lines, conds, source);
})('lib/processor.js', [2,4,6,54,15,23,42,46,50,8,9,10,11,12,17,19,24,25,26,27,28,39,33,34,30,31,36,43,47], {"8_47_12":0,"8_62_1":0,"9_43_10":0,"9_56_1":0,"16_8_37":0,"29_10_30":0,"29_10_3":0,"29_17_23":0,"35_10_24":0}, ["// Generated by CoffeeScript 1.8.0","var Pool, Processor;","","Pool = require('./pool').Pool;","","Processor = (function() {","  function Processor(job, maxProcesses, numRetries) {","    this.maxProcesses = maxProcesses != null ? maxProcesses : 1;","    this.numRetries = numRetries != null ? numRetries : 0;","    this.pool = new Pool(job);","    this.processing = 0;","    this.waitingQueue = [];","  }","","  Processor.prototype.run = function() {","    if (this.processing++ < this.maxProcesses) {","      return this.createWorker(arguments);","    } else {","      return this.pushToWaitingQueue(arguments);","    }","  };","","  Processor.prototype.createWorker = function(args) {","    var job, self, worker;","    self = this;","    worker = this.pool.getWorker();","    worker.numRetries = this.numRetries;","    job = function(err) {","      if (err && worker.numRetries-- > 0) {","        worker.run(job, args);","        return;","      }","      self.processing--;","      self.pool.dispose(worker);","      if (self.waitingQueue.length) {","        return self.createWorker(self.popFromWaitingQueue());","      }","    };","    return worker.run(job, args);","  };","","  Processor.prototype.pushToWaitingQueue = function(args) {","    return this.waitingQueue.push(args);","  };","","  Processor.prototype.popFromWaitingQueue = function() {","    return this.waitingQueue.shift();","  };","","  return Processor;","","})();","","module.exports.Processor = Processor;",""]);
// Generated by CoffeeScript 1.8.0
_$jscmd("lib/processor.js", "line", 2);

var Pool, Processor;

_$jscmd("lib/processor.js", "line", 4);

Pool = require("./pool").Pool;

_$jscmd("lib/processor.js", "line", 6);

Processor = function() {
    function Processor(job, maxProcesses, numRetries) {
        _$jscmd("lib/processor.js", "line", 8);
        this.maxProcesses = maxProcesses != null ? _$jscmd("lib/processor.js", "cond", "8_47_12", maxProcesses) : _$jscmd("lib/processor.js", "cond", "8_62_1", 1);
        _$jscmd("lib/processor.js", "line", 9);
        this.numRetries = numRetries != null ? _$jscmd("lib/processor.js", "cond", "9_43_10", numRetries) : _$jscmd("lib/processor.js", "cond", "9_56_1", 0);
        _$jscmd("lib/processor.js", "line", 10);
        this.pool = new Pool(job);
        _$jscmd("lib/processor.js", "line", 11);
        this.processing = 0;
        _$jscmd("lib/processor.js", "line", 12);
        this.waitingQueue = [];
    }
    _$jscmd("lib/processor.js", "line", 15);
    Processor.prototype.run = function() {
        if (_$jscmd("lib/processor.js", "cond", "16_8_37", this.processing++ < this.maxProcesses)) {
            _$jscmd("lib/processor.js", "line", 17);
            return this.createWorker(arguments);
        } else {
            _$jscmd("lib/processor.js", "line", 19);
            return this.pushToWaitingQueue(arguments);
        }
    };
    _$jscmd("lib/processor.js", "line", 23);
    Processor.prototype.createWorker = function(args) {
        _$jscmd("lib/processor.js", "line", 24);
        var job, self, worker;
        _$jscmd("lib/processor.js", "line", 25);
        self = this;
        _$jscmd("lib/processor.js", "line", 26);
        worker = this.pool.getWorker();
        _$jscmd("lib/processor.js", "line", 27);
        worker.numRetries = this.numRetries;
        _$jscmd("lib/processor.js", "line", 28);
        job = function(err) {
            if (_$jscmd("lib/processor.js", "cond", "29_10_30", _$jscmd("lib/processor.js", "cond", "29_10_3", err) && _$jscmd("lib/processor.js", "cond", "29_17_23", worker.numRetries-- > 0))) {
                _$jscmd("lib/processor.js", "line", 30);
                worker.run(job, args);
                _$jscmd("lib/processor.js", "line", 31);
                return;
            }
            _$jscmd("lib/processor.js", "line", 33);
            self.processing--;
            _$jscmd("lib/processor.js", "line", 34);
            self.pool.dispose(worker);
            if (_$jscmd("lib/processor.js", "cond", "35_10_24", self.waitingQueue.length)) {
                _$jscmd("lib/processor.js", "line", 36);
                return self.createWorker(self.popFromWaitingQueue());
            }
        };
        _$jscmd("lib/processor.js", "line", 39);
        return worker.run(job, args);
    };
    _$jscmd("lib/processor.js", "line", 42);
    Processor.prototype.pushToWaitingQueue = function(args) {
        _$jscmd("lib/processor.js", "line", 43);
        return this.waitingQueue.push(args);
    };
    _$jscmd("lib/processor.js", "line", 46);
    Processor.prototype.popFromWaitingQueue = function() {
        _$jscmd("lib/processor.js", "line", 47);
        return this.waitingQueue.shift();
    };
    _$jscmd("lib/processor.js", "line", 50);
    return Processor;
}();

_$jscmd("lib/processor.js", "line", 54);

module.exports.Processor = Processor;